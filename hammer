#!/usr/bin/env python
#
# hammer, version 1.3, by John Wiegley <johnw@gnu.org>
#
# This script will examine all of the symbolic links in a directory
# hierarchy, and report anything that's less than optimal (which means
# links to missing targets, and links that are longer than they need
# to be).

import string
import sys
import os

from os.path import *

def usage():
    print """usage: hammer [OPTIONS] [DIRS]...

options:
    --fix         fix "long" links by choosing the most optimal path
    --delete      delete all dangling links (dangerous!!)
    --known FILE  ignore links listed in FILE

Note: A "long" link is one that is longer than it needs to be.  For
example, the file /bin/sh links to /bin/bash.  The shortest form of
such a link is simply "bash".  Using "/bin/bash" or "../bin/bash" is
longer than necessary.  There is no harm in this, but in some cases
links can get excessively long, when a far simpler path would do."""
    sys.exit(0)

fix    = 0
delete = 0
args   = sys.argv[1:]
known  = []

def handle_symlink(path):
    target = os.readlink(path)
    name   = normpath(target)

    if target[0] != os.sep:
        target = normpath(join(dirname(path), name))

    if not exists(target):
        if delete:
            os.unlink(path)
        else:
            print "dangling:", path, "->", target
        return

    prefix = commonprefix([target, path])

    while prefix and prefix[-1] != os.sep:
        prefix = prefix[:-1]

    # See how many dirs up we'd have to go to make this symlink
    # relative.  Just one dir off from root isn't very interesting.
    # NOTE: /home/ -> ['', 'home', ''] with string.split.

    if len(string.split(prefix, os.sep)) == 3:
        return

    parts   = string.split(path[len(prefix) :], os.sep)
    dots    = apply(join, ["."] + [".."] * (len(parts) - 1))
    newname = normpath(join(dots, target[len(prefix) :]))

    # Usually relative paths are shorter than abs, but not always.

    if target[0] == os.sep and len(target) < len(newname):
        newname = target

    # If we've come up with a shorter name (either relative or
    # absolute), notify the user that they're suffering from an
    # excessive symlink

    if len(newname) < len(name):
        if fix:
            os.unlink(path)
            os.symlink(newname, path)
        else:
            print "long:", path, "->", name, "(%s)" % newname

def find_symlinks(path):
    entries = os.listdir(path)
    for entry in entries:
        entry = join(path, entry)
        if islink(entry) and entry not in known:
            handle_symlink(entry)
        elif isdir(entry) and entry != "/proc":
            find_symlinks(entry)

if len(args) == 0:
    usage()

while len(args) and len(args[0]) and args[0][0] == '-':
    if args[0] == "--fix":
        fix = 1
    elif args[0] == "--delete":
        delete = 1
    elif args[0] == "--known":
        args.pop(0)
        fd = open(args[0], "r")
        known = map(lambda x: x[:-1], fd.readlines())
        fd.close()
    elif args[0] == "--help" or args[0] == "-h":
        usage()
    args.pop(0)

if len(args):
    paths = args
else:
    paths = ["."]

for path in paths:
    find_symlinks(path)
